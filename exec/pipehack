# This file is part of newrun, copyright Â© 2011, 2012 M. Kristall

## Config variables
# PIPEPATH	name of the pipe file (something like .tremded_pipe?)
# EXECHACK	executor to use for communicating with the server

# Use this if you want to send commands using a fifo (pipe file)
# 

if [[ "$EXEC" != "pipehack" ]]; then
	warn "$_NAME: COMM=pipehack is not valid"
	exit 255
fi

if [[ "$EXECHACK" != "" ]]; then
	include "$_EXECPATH/$EXECHACK"
fi

COMM=pipe

_pipehack_send () {
	if [[ "$EXECHACK" == "" ]]; then
		echo "$@"
	else
		"$EXECHACK"Cmd "$@"
	fi
}

_pipehack_start () {
	local pid=$PID
	while true; do
		if [ ! -p "$PIPEPATH" ]; then
			mkfifo "$PIPEPATH"
		fi
		while read -r x < "$PIPEPATH"; do
			_pipehack_send "$x"
			y=($x)
			y[0]=$(echo ${y[0]} | tr [A-Z] [a-z])
			if [[ "${y[0]}" == "$QUIT" ]]; then
				break 2
			fi
		done
		if ! kill -0 $pid 2>/dev/null; then
			break 1
		fi
	done
	rm "$PIPEPATH"
	if [[ "$EXECHACK" != "" ]]; then
		"$EXECHACK"Stop "${x:5}"
	fi
}

pipehackStart () {
	local r=127
	if [[ "$EXECHACK" != "" ]]; then
		"$EXECHACK"Start "$@"
		r=$?
	fi
	if (( r == 127 )); then
		EXECHACK=
		_pipehack_start | "$SERVER" "$@" &> /dev/null &
	else
		_pipehack_start &> /dev/null &
		PID=$!
	fi
	disown
	COMM=pipe
	savepid
}

pipehackStartCmd () {
	COMM="$EXEC"
	if [[ "$EXECHACK" != "" ]]; then
		"$EXECHACK"StartCmd
	fi
}

pipehackStop () {
	"$EXECHACK"Stop "$@"
	return $?
}
