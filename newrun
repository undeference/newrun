#!/bin/bash
# This file is part of newrun, copyright © 2011, 2012, 2014 M. Kristall
#
# This program is free software. You can redistribute it and/or modify it under
# the terms of version 2 of the GNU General Public License (GPL) as published by
# the Free Software Foundation.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GPL
# for more details.
#
# You should have received a copy of the GPL with this distribution. If not,
# see <http://www.gnu.org/licenses/>.

## Exit statuses
# 3		no or invalid config
# 4		config error
# 5		executioner error
# 125		potential error

## Config variables
# TYPE		server type
# EXEC		(executioner) functions to control the server
# COMM		(executioner) to communicate with the server
# SERVER	full path to tremded to execute
# DEFAULT_PIDFILE
#		the default pid file used by the server, if applicable

## EXEC functions
# Cmd		exec a command on the server
#	arguments=command to exec
# Start		start the server
#	arguments=optional extra arguments to server (after ARGS)
# Stop		stop the server
#	arguments=optional message to send
# Restart	restart the server
#	arguments=optional extra arguments to server (after ARGS)
# Reload	reload server data after an upgrade
#	arguments=none

# determine path and name and change to a safe location in case an executioner
# daemonizes
_PATH="$(dirname "${BASH_SOURCE[0]}")"
_NAME="$(basename "${BASH_SOURCE[0]}")"
cd "$_PATH"
_PATH="$(pwd)"
cd /

. "$_PATH/configuration" &> /dev/null || . /etc/newrun.conf || exit 3
. "$_FUNCTIONSPATH"

config="$1"
shift 1

if [[ "$config" == "" ]]; then
	warn "$_NAME config cmd [args]"
	exit 3
fi

cmds=()
cmd_start () {
	if getpid; then
		if isrunning; then
			warn "$_NAME: server already running pid=$PID"
			exit 125
		fi
		rm -f "$PIDFILE" &> /dev/null
	fi
	Start "$@"
	if getpid; then
		echo "server pid=$PID"
	fi
}

cmd_restart () {
	Restart "$@"
	if getpid; then
		echo "server pid=$PID"
	fi
}

cmd_status () {
	if isrunning; then
		echo "$config is running with pid=$PID"
	else
		echo "$config is not running"
	fi
}

cmds+=(start cmd_start)
cmds+=(restart cmd_restart)
cmds+=(stop Stop)
cmds+=(reload Reload)
cmds+=(exec Cmd)
cmds+=(status cmd_status)

cmd="$1"
shift 1

# load plugins late
if [ ! -z "$_PLUGINPATH" ] && [ -d "$_PLUGINPATH" ]; then
	echo "Loading plugins…"
	plugins=($_PLUGINPATH/*)
	for (( i = 0; i < ${#plugins[@]}; i++ )); do
		echo "	$(basename "${plugins[i]}")"
		. "${plugins[i]}"
	done
fi

err=
for (( i = 0; i < ${#cmds[@]}; i += 2 )); do
	if (( i > 0 )); then
		err+="|${cmds[i]}"
	else
		err="${cmds[i]}"
	fi
	if [[ "$cmd" == "${cmds[i]}" ]]; then
		readconfig "$config"
		"${cmds[i + 1]}" "$@"
		exit 0
	fi
done

warn "$_NAME $config $err [args]"
exit 125
